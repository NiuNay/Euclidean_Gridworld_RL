seed: 0

training:
    training_data:
        type: generated # generated, from_file
        
        generated:
            num_steps: 250000

        from_file:
            file_path: ../training_data/random_walk_data_generated_1_2.npy # data needs to be in the format [num_steps, coordinates (x,y) or (x,y,x_attempted,y_attempted), num_trials]
    
    model: a_star

    behaviour: epsilon_greedy
    target: greedy
    test_epsilon: 1

    train_run_trigger_states: 
        #- [9, 12] # 
        #- [5, 12] #
        #- [7, 12]
        #- [7, 12]
        #- [3, 7]
        #- [11, 7]

    train_run_action_sequences:
        #- [6, 3, 3, 6, 3]    # 9, 12 #
        #- [7, 3, 3, 7, 3]    # 5, 12 #
        #- [7, 7, 7, 7, 3]    # 7, 12
        #- [6, 6, 6, 6, 3]    # 7, 12

        #- [3, 6, 6, 6, 6, 3] # 3, 7
        #- [3, 7, 7, 7, 7, 3] # 11, 7
    
    train_run_trigger_probabilities:
        #[0.2, 0.2, 0.4, 0.4, 0.2, 0.2]
         [0., 0., 0., 0., 0., 0., 0. ]

    learning_rate: 
        schedule: hard_coded

        constant:
            value: 0.1
        
        linear_decay:
            initial_value: 0.1
            final_value: 0.01
            anneal_duration: 250000

        hard_coded:
            values: [0.1, 0.001]
            timestep_changes: [100000]
            
    discount_factor: 0.9
    train_step_cost_factor: 0.01

    one_dim_blocks: True
    imputation_method: random

    update_no_op: True

    gradual_learner_window_average: 1

    a_star:
        # deterministic_min: chooses minimum node cost using np.min so will deterministically select first lowest cost
        # random_min: chooses randomly from nodes that have minimum cost
        # random_min_window: chooses randomly from nodes that have minimum cost + some tolerance
        node_cost_resolution: random_min
        tolerance: 0.1 # only used for random_min_window

    epsilon:
        schedule: constant

        constant:
            value: 1
        
        linear_decay:
            initial_value: 0.99
            final_value: 0.1
            anneal_duration: 250000

initialisation:
    type: random_normal

    random_uniform:
        lower_bound: 0
        upper_bound: 1

    random_normal:
        mean: 0
        variance: 0.1

train_environment: 

    env_name: escape_env_diagonal
    map_path: ../circular_maps/obstacle_map.txt

    episode_timeout: 500
    representation: agent_position
    start_position:
    reward_positions:
        - [7, 1]

    # provide either one set of attributes (used for all rewards)
    # or one set for each reward
    reward_attributes:
        availability: [1] # integer specifying number available or "infinite"
        statistics:
            - gaussian:
                mean: 1
                variance: 0

    train_hierarchy_network:
        transition_structure_path: ../maps/vector_blocked_hierarchy_transition_7.json

test_environments:

    env_name: escape_env_diagonal
    map_paths: 
        - ../circular_maps/obstacle_map.txt
        - ../circular_maps/test_map.txt

    num_trials: 3

    episode_timeout: 500
    representation: agent_position
    start_position: [7, 12]
    reward_positions:
        - [7, 1]
    step_cost_factor: 0.01

    # provide either one set of attributes (used for all rewards)
    # or one set for each reward
    reward_attributes:
        availability: [1] # integer specifying number available or "infinite"
        statistics:
            - gaussian:
                mean: 1
                variance: 0

    test_hierarchy_network:
        transition_structure_paths: 
            - ../maps/test_hierarchy_transition_7.json
            - ../maps/hierarchy_transition_7.json

logging:
    print_frequency: 5000
    visualisation_frequency: 50000
    rollout_frequency: 50000
    train_test_frequency: 5000
    test_frequency: 50000
    checkpoint_frequency: 50000

    visualisations: 
